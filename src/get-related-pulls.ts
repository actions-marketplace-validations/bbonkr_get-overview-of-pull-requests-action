import * as core from '@actions/core'
import * as github from '@actions/github'
import {handleError} from './handle-error'
import {PrStatus} from './pr-status'

type Pull = {
  number: number
  labels: {
    name: string
  }[]
  assignee: {
    login?: string
  }
  assignees?: {
    login?: string
  }[]
  milestone: {
    number?: number
  }
}

type Pulls = Pull[]

export const GetRelatedPrsOutput = {
  title: 'pr_title',
  body: 'pr_body',
  labels: 'pr_labels',

  milestone: 'pr_milestone',
  assignees: 'pr_assignees',
  reviewers: 'pr_reviewers'
}

type GetRelatedPullsOptions = {
  token: string
  owner: string
  repo: string
  /**
   * Branch name which collects informations
   */
  base: string
  /**
   * Only items that have been merged since this date are handled.
   */
  mergedAfter?: Date
  limit?: number
  message?: string
  hideNotificationMessage?: boolean
}

export type GetRelatedPullsResult = {
  title?: string
  body?: string
  labels?: string
  milestone?: string
  assignees?: string
  reviewers?: string
}

export const getRelatedPulls = async (
  options: GetRelatedPullsOptions
): Promise<GetRelatedPullsResult | null> => {
  const {
    token,
    owner,
    repo,
    base,
    mergedAfter,
    limit,
    message,
    hideNotificationMessage
  } = options

  const merged = mergedAfter ?? new Date('1990-01-01T00:00:00Z')
  const targetPrsLimit = limit ?? -1

  const notificationMessage =
    'This pull generated by [bbonkr/get-overview-of-pull-requests-action](https://github.com/bbonkr/get-overview-of-pull-requests-action)'

  try {
    let prs: Pulls = []
    let resultCount = 0
    let page = 1
    const targetState: PrStatus = 'closed'

    const octokit = github.getOctokit(token)

    do {
      try {
        core.debug(`Try to get list of pulls. repo=${repo}`)
        const {data} = await octokit.rest.pulls.list({
          owner,
          repo,
          base,
          sort: 'created',
          direction: 'desc',
          state: 'closed',
          page,
          per_page: 100
        })

        resultCount = data?.length ?? 0

        core.debug(`Found ${resultCount} pulls.`)

        const upToPRs = data
          .slice()
          .filter(
            x =>
              x.state === targetState &&
              x.merged_at &&
              new Date(x.merged_at) > merged
          )
          .map(x => {
            const pull: Pull = {
              number: x.number,
              labels: x.labels?.map(label => ({name: label.name})),
              assignee: {login: x.assignee?.login},
              assignees: x.assignees?.map(a => ({login: a.login})),
              milestone: {number: x.milestone?.number}
            }
            return pull
          })

        core.debug(`Count of filtered pulls is ${upToPRs.length}`)

        if (upToPRs && upToPRs.length > 0) {
          prs = [...prs, ...upToPRs]
        } else {
          break
        }

        // Apply limit
        if (targetPrsLimit > 0 && prs.length > targetPrsLimit) {
          prs = prs.filter((_, index) => index < targetPrsLimit)
          break
        }

        page = page + 1 // next page
      } catch (err) {
        core.debug('Fail to get list of pulls.')
        break
      }
    } while (resultCount > 0)

    core.debug(`Count of collected pulls is ${prs.length}.`)

    const labels = prs
      .flatMap(pr => pr.labels.map(label => label.name))
      .filter((x, index, arr) => index === arr.findIndex(a => x === a))

    const assignees = prs
      .flatMap(pr =>
        [pr.assignee, ...(pr.assignees ?? [])].map(assignee => assignee?.login)
      )
      .filter((x, index, arr) => index === arr.findIndex(a => x === a))

    const milestone = prs
      .filter(pr => typeof pr.milestone?.number === 'number')
      .find((_, index) => index === 0)

    const title = `PRs which Merged into ${base}`

    const body = `## Description
${
  message
    ? `

${message}
`
    : ''
}

### Related pulls

${prs.map(pr => `- #${pr.number}`).join('\n')}

${
  hideNotificationMessage
    ? ''
    : `
---

> ${notificationMessage}`
}

    `

    return {
      title,
      body,
      labels: (labels ?? []).join(','),
      milestone: `${milestone?.number ?? ''}`,
      assignees: (assignees ?? []).join(','),
      reviewers: (assignees ?? []).join(',')
    }
  } catch (err: unknown) {
    handleError(err)
  }

  return null
}

export default getRelatedPulls
